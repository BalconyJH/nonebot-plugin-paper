name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

permissions:
  contents: write
  id-token: write
  actions: read
  checks: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment:
      name: release

    steps:
      - name: Checkout (no credential persistence)
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup uv (pinned; cache hardened)
        uses: astral-sh/setup-uv@caf0cab7a618c569241d31dcd442f54681755d39
        with:
          enable-cache: false

      - name: Build
        run: |
          set -euo pipefail
          uv build

      - name: Install nb-cli
        run: |
          set -euo pipefail
          uv tool install nb-cli

      # Smoke test (wheel)
      - name: Smoke test (wheel)
        run: |
          set -euo pipefail
          shopt -s nullglob
          wheels=(dist/*.whl)
          if [ ${#wheels[@]} -eq 0 ]; then
            echo "No wheel found in dist/"; exit 1
          fi
          uv run --isolated --no-project -p 3.12 --with "${wheels[@]}" nb run

      # Smoke test (sdist)
      - name: Smoke test (source distribution)
        run: |
          set -euo pipefail
          shopt -s nullglob
          sdists=(dist/*.tar.gz)
          if [ ${#sdists[@]} -eq 0 ]; then
            echo "No sdist found in dist/"; exit 1
          fi
          uv run --isolated --no-project -p 3.12 --with "${sdists[@]}" nb run

      - name: Publish to PyPI (Trusted Publishing)
        run: |
          set -euo pipefail
          uv publish --trusted-publishing always

      - name: Upload Release Assets (safe)
        env:
          TAG_NAME: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          shopt -s nullglob

          case "${TAG_NAME}" in
            v[0-9]*.[0-9]*.[0-9]*|v[0-9]*.[0-9]*.[0-9]*-*) ;;
            *) echo "Invalid tag: '${TAG_NAME}'" >&2; exit 1 ;;
          esac

          artifacts=()
          for f in dist/*.tar.gz dist/*.whl; do
            artifacts+=("$f")
          done
          if [ ${#artifacts[@]} -eq 0 ]; then
            echo "No artifacts found in dist/"; exit 1
          fi

          gh release view "$TAG_NAME" >/dev/null 2>&1 || \
            gh release create "$TAG_NAME" -t "$TAG_NAME" -n ""

          gh release upload --clobber "$TAG_NAME" -- "${artifacts[@]}"
